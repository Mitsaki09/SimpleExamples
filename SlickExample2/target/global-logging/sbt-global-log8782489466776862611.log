[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.4.9 (Oracle Corporation Java 16.0.1)
[debug]       Load.loadUnit: plugins took 465.8753ms
[debug]       Load.loadUnit: defsScala took 0.7113ms
[debug] [Loading] Scanning directory C:\Users\Mitsaki\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\Mitsaki\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 108.9044 ms
[debug]           Load.resolveProject(global-plugins) took 162.3878ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\Mitsaki\.sbt\1.0\plugins, plugins: List(<none>))) took 358.443ms
[debug] [Loading] Done in C:\Users\Mitsaki\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 463.7307ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.9259ms
[debug]     Load.loadUnit(file:/C:/Users/Mitsaki/.sbt/1.0/plugins/, ...) took 968.6169ms
[debug]   Load.apply: load took 1734.9895ms
[debug]   Load.apply: resolveProjects took 25.2088ms
[debug]   Load.apply: finalTransforms took 277.5296ms
[debug]   Load.apply: config.delegates took 33.3278ms
[debug]   Load.apply: Def.make(settings)... took 9052.7946ms
[debug]   Load.apply: structureIndex took 444.311ms
[debug]   Load.apply: mkStreams took 6.8465ms
[info] loading global plugins from C:\Users\Mitsaki\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 26832.9438ms
[debug]           Load.loadUnit: plugins took 67.4657ms
[debug]           Load.loadUnit: defsScala took 0.0097ms
[debug] [Loading] Scanning directory D:\SimpleExamples\SlickExample2\project
[debug]             Load.loadUnit: mkEval took 13.8359ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in D:\SimpleExamples\SlickExample2\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 5.575 ms
[info] loading settings for project slickexample2-build from idea.sbt ...
[debug]               Load.resolveProject(slickexample2-build) took 44.373ms
[debug]             Load.loadTransitive: finalizeProject(Project(id slickexample2-build, base: D:\SimpleExamples\SlickExample2\project, plugins: List(<none>))) took 50.8913ms
[debug] [Loading] Done in D:\SimpleExamples\SlickExample2\project, returning: (slickexample2-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 7567.5947ms
[debug]           Load.loadUnit: cleanEvalClasses took 21.2966ms
[debug]         Load.loadUnit(file:/D:/SimpleExamples/SlickExample2/project/, ...) took 7658.4022ms
[debug]       Load.apply: load took 7662.4331ms
[debug]       Load.apply: resolveProjects took 0.2732ms
[debug]       Load.apply: finalTransforms took 53.4779ms
[debug]       Load.apply: config.delegates took 0.5767ms
[debug]       Load.apply: Def.make(settings)... took 446.1822ms
[debug]       Load.apply: structureIndex took 124.9743ms
[debug]       Load.apply: mkStreams took 0.0031ms
[info] loading project definition from D:\SimpleExamples\SlickExample2\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 9877.1864ms
[debug]     Load.loadUnit: defsScala took 0.0088ms
[debug] [Loading] Scanning directory D:\SimpleExamples\SlickExample2
[debug]       Load.loadUnit: mkEval took 0.5942ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in D:\SimpleExamples\SlickExample2, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin))), Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 6.0891 ms
[info] loading settings for project slickexample2 from build.sbt ...
[debug]         Load.resolveProject(slickexample2) took 92.0767ms
[debug]       Load.loadTransitive: finalizeProject(Project(id slickexample2, base: D:\SimpleExamples\SlickExample2, plugins: List(<none>))) took 100.3562ms
[debug] [Loading] Done in D:\SimpleExamples\SlickExample2, returning: (slickexample2)
[debug]     Load.loadUnit: loadedProjectsRaw took 3909.5036ms
[debug]     Load.loadUnit: cleanEvalClasses took 41.9796ms
[debug]   Load.loadUnit(file:/D:/SimpleExamples/SlickExample2/, ...) took 13831.0057ms
[debug] Load.apply: load took 13833.9117ms
[debug] Load.apply: resolveProjects took 0.1392ms
[debug] Load.apply: finalTransforms took 77.8819ms
[debug] Load.apply: config.delegates took 1.0395ms
[debug] Load.apply: Def.make(settings)... took 356.5782ms
[debug] Load.apply: structureIndex took 116.9647ms
[debug] Load.apply: mkStreams took 0.0049ms
[info] set current project to SlickExample2 (in build file:/D:/SimpleExamples/SlickExample2/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 56681 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 56681, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to SlickExample2 (in build file:/D:/SimpleExamples/SlickExample2/)
[debug] > Exec(idea-shell, None, None)
