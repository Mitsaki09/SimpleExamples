
// Generated by Akka gRPC. DO NOT EDIT.
package com.example.SwordMasterServiceProto

import scala.concurrent.ExecutionContext

import akka.actor.ClassicActorSystemProvider

import akka.grpc.GrpcClientSettings

import akka.grpc.scaladsl.AkkaGrpcClient

import akka.grpc.internal.NettyClientUtils
import akka.grpc.internal.ClientState

import akka.grpc.scaladsl.SingleResponseRequestBuilder
import akka.grpc.internal.ScalaUnaryRequestBuilder

// Not sealed so users can extend to write their stubs
trait HumanMasterServiceClient extends HumanMasterService with HumanMasterServiceClientPowerApi with AkkaGrpcClient

object HumanMasterServiceClient {
  def apply(settings: GrpcClientSettings)(implicit sys: ClassicActorSystemProvider): HumanMasterServiceClient =
    new DefaultHumanMasterServiceClient(settings)
}

final class DefaultHumanMasterServiceClient(settings: GrpcClientSettings)(implicit sys: ClassicActorSystemProvider) extends HumanMasterServiceClient {
  import HumanMasterService.MethodDescriptors._

  private implicit val ex: ExecutionContext = sys.classicSystem.dispatcher
  private val options = NettyClientUtils.callOptions(settings)
  private val clientState = new ClientState(settings, akka.event.Logging(sys.classicSystem, this.getClass))

  
    private def sayHumanRequestBuilder(channel: akka.grpc.internal.InternalChannel) = {
      
        new ScalaUnaryRequestBuilder(sayHumanDescriptor, channel, options, settings)
      
    }
  

  
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer sayHuman(com.example.SwordMasterServiceProto.HumanRequest) if possible.
     */
    
      override def sayHuman(): SingleResponseRequestBuilder[com.example.SwordMasterServiceProto.HumanRequest, com.example.SwordMasterServiceProto.HumanReply] =
        sayHumanRequestBuilder(clientState.internalChannel)
    

    /**
     * For access to method metadata use the parameterless version of sayHuman
     */
    def sayHuman(in: com.example.SwordMasterServiceProto.HumanRequest): scala.concurrent.Future[com.example.SwordMasterServiceProto.HumanReply] =
      sayHuman().invoke(in)
  

  override def close(): scala.concurrent.Future[akka.Done] = clientState.close()
  override def closed: scala.concurrent.Future[akka.Done] = clientState.closed()

}

object DefaultHumanMasterServiceClient {

  def apply(settings: GrpcClientSettings)(implicit sys: ClassicActorSystemProvider): HumanMasterServiceClient =
    new DefaultHumanMasterServiceClient(settings)
}

trait HumanMasterServiceClientPowerApi {
  
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer sayHuman(com.example.SwordMasterServiceProto.HumanRequest) if possible.
     */
    
      def sayHuman(): SingleResponseRequestBuilder[com.example.SwordMasterServiceProto.HumanRequest, com.example.SwordMasterServiceProto.HumanReply] = ???
    
  

}
