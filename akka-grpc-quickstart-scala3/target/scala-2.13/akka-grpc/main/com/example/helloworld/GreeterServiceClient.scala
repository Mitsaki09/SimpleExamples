
// Generated by Akka gRPC. DO NOT EDIT.
package com.example.helloworld

import scala.concurrent.ExecutionContext

import akka.actor.ClassicActorSystemProvider

import akka.grpc.GrpcClientSettings

import akka.grpc.scaladsl.AkkaGrpcClient

import akka.grpc.internal.NettyClientUtils
import akka.grpc.internal.ClientState

import akka.grpc.scaladsl.SingleResponseRequestBuilder
import akka.grpc.internal.ScalaUnaryRequestBuilder

// Not sealed so users can extend to write their stubs
trait GreeterServiceClient extends GreeterService with GreeterServiceClientPowerApi with AkkaGrpcClient

object GreeterServiceClient {
  def apply(settings: GrpcClientSettings)(implicit sys: ClassicActorSystemProvider): GreeterServiceClient =
    new DefaultGreeterServiceClient(settings)
}

final class DefaultGreeterServiceClient(settings: GrpcClientSettings)(implicit sys: ClassicActorSystemProvider) extends GreeterServiceClient {
  import GreeterService.MethodDescriptors._

  private implicit val ex: ExecutionContext = sys.classicSystem.dispatcher
  private val options = NettyClientUtils.callOptions(settings)
  private val clientState = new ClientState(settings, akka.event.Logging(sys.classicSystem, this.getClass))

  
    private def sayHelloRequestBuilder(channel: akka.grpc.internal.InternalChannel) = {
      
        new ScalaUnaryRequestBuilder(sayHelloDescriptor, channel, options, settings)
      
    }
  
    private def sayPigInfoRequestBuilder(channel: akka.grpc.internal.InternalChannel) = {
      
        new ScalaUnaryRequestBuilder(sayPigInfoDescriptor, channel, options, settings)
      
    }
  
    private def sayHumanInfoRequestBuilder(channel: akka.grpc.internal.InternalChannel) = {
      
        new ScalaUnaryRequestBuilder(sayHumanInfoDescriptor, channel, options, settings)
      
    }
  
    private def sayWorkInfoHumanRequestBuilder(channel: akka.grpc.internal.InternalChannel) = {
      
        new ScalaUnaryRequestBuilder(sayWorkInfoHumanDescriptor, channel, options, settings)
      
    }
  
    private def houseAndCitizenRequestBuilder(channel: akka.grpc.internal.InternalChannel) = {
      
        new ScalaUnaryRequestBuilder(houseAndCitizenDescriptor, channel, options, settings)
      
    }
  

  
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer sayHello(com.example.helloworld.HelloRequest) if possible.
     */
    
      override def sayHello(): SingleResponseRequestBuilder[com.example.helloworld.HelloRequest, com.example.helloworld.HelloReply] =
        sayHelloRequestBuilder(clientState.internalChannel)
    

    /**
     * For access to method metadata use the parameterless version of sayHello
     */
    def sayHello(in: com.example.helloworld.HelloRequest): scala.concurrent.Future[com.example.helloworld.HelloReply] =
      sayHello().invoke(in)
  
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer sayPigInfo(com.example.helloworld.PigInfoRequest) if possible.
     */
    
      override def sayPigInfo(): SingleResponseRequestBuilder[com.example.helloworld.PigInfoRequest, com.example.helloworld.PigInfoReply] =
        sayPigInfoRequestBuilder(clientState.internalChannel)
    

    /**
     * For access to method metadata use the parameterless version of sayPigInfo
     */
    def sayPigInfo(in: com.example.helloworld.PigInfoRequest): scala.concurrent.Future[com.example.helloworld.PigInfoReply] =
      sayPigInfo().invoke(in)
  
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer sayHumanInfo(com.example.helloworld.HumanRequest) if possible.
     */
    
      override def sayHumanInfo(): SingleResponseRequestBuilder[com.example.helloworld.HumanRequest, com.example.helloworld.HumanReply] =
        sayHumanInfoRequestBuilder(clientState.internalChannel)
    

    /**
     * For access to method metadata use the parameterless version of sayHumanInfo
     */
    def sayHumanInfo(in: com.example.helloworld.HumanRequest): scala.concurrent.Future[com.example.helloworld.HumanReply] =
      sayHumanInfo().invoke(in)
  
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer sayWorkInfoHuman(com.example.helloworld.WorkInfoHumanRequest) if possible.
     */
    
      override def sayWorkInfoHuman(): SingleResponseRequestBuilder[com.example.helloworld.WorkInfoHumanRequest, com.example.helloworld.WorkInfoHumanReply] =
        sayWorkInfoHumanRequestBuilder(clientState.internalChannel)
    

    /**
     * For access to method metadata use the parameterless version of sayWorkInfoHuman
     */
    def sayWorkInfoHuman(in: com.example.helloworld.WorkInfoHumanRequest): scala.concurrent.Future[com.example.helloworld.WorkInfoHumanReply] =
      sayWorkInfoHuman().invoke(in)
  
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer houseAndCitizen(com.example.helloworld.Citizen) if possible.
     */
    
      override def houseAndCitizen(): SingleResponseRequestBuilder[com.example.helloworld.Citizen, com.example.helloworld.House] =
        houseAndCitizenRequestBuilder(clientState.internalChannel)
    

    /**
     * For access to method metadata use the parameterless version of houseAndCitizen
     */
    def houseAndCitizen(in: com.example.helloworld.Citizen): scala.concurrent.Future[com.example.helloworld.House] =
      houseAndCitizen().invoke(in)
  

  override def close(): scala.concurrent.Future[akka.Done] = clientState.close()
  override def closed: scala.concurrent.Future[akka.Done] = clientState.closed()

}

object DefaultGreeterServiceClient {

  def apply(settings: GrpcClientSettings)(implicit sys: ClassicActorSystemProvider): GreeterServiceClient =
    new DefaultGreeterServiceClient(settings)
}

trait GreeterServiceClientPowerApi {
  
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer sayHello(com.example.helloworld.HelloRequest) if possible.
     */
    
      def sayHello(): SingleResponseRequestBuilder[com.example.helloworld.HelloRequest, com.example.helloworld.HelloReply] = ???
    
  
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer sayPigInfo(com.example.helloworld.PigInfoRequest) if possible.
     */
    
      def sayPigInfo(): SingleResponseRequestBuilder[com.example.helloworld.PigInfoRequest, com.example.helloworld.PigInfoReply] = ???
    
  
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer sayHumanInfo(com.example.helloworld.HumanRequest) if possible.
     */
    
      def sayHumanInfo(): SingleResponseRequestBuilder[com.example.helloworld.HumanRequest, com.example.helloworld.HumanReply] = ???
    
  
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer sayWorkInfoHuman(com.example.helloworld.WorkInfoHumanRequest) if possible.
     */
    
      def sayWorkInfoHuman(): SingleResponseRequestBuilder[com.example.helloworld.WorkInfoHumanRequest, com.example.helloworld.WorkInfoHumanReply] = ???
    
  
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer houseAndCitizen(com.example.helloworld.Citizen) if possible.
     */
    
      def houseAndCitizen(): SingleResponseRequestBuilder[com.example.helloworld.Citizen, com.example.helloworld.House] = ???
    
  

}
