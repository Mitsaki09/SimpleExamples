
// Generated by Akka gRPC. DO NOT EDIT.
package com.example.helloworld

import akka.annotation.ApiMayChange


trait GreeterService {
  
  
  def sayHello(in: com.example.helloworld.HelloRequest): scala.concurrent.Future[com.example.helloworld.HelloReply]
  
  
  def sayPigInfo(in: com.example.helloworld.PigInfoRequest): scala.concurrent.Future[com.example.helloworld.PigInfoReply]
  
  
  def sayHumanInfo(in: com.example.helloworld.HumanRequest): scala.concurrent.Future[com.example.helloworld.HumanReply]
  
  
  def sayWorkInfoHuman(in: com.example.helloworld.WorkInfoHumanRequest): scala.concurrent.Future[com.example.helloworld.WorkInfoHumanReply]
  
  
  def houseAndCitizen(in: com.example.helloworld.Citizen): scala.concurrent.Future[com.example.helloworld.House]
  
}



object GreeterService extends akka.grpc.ServiceDescription {
  val name = "GreeterService"

  val descriptor: com.google.protobuf.Descriptors.FileDescriptor =
    com.example.helloworld.HelloworldProto.javaDescriptor;

  object Serializers {
    import akka.grpc.scaladsl.ScalapbProtobufSerializer
    
    val HelloRequestSerializer = new ScalapbProtobufSerializer(com.example.helloworld.HelloRequest.messageCompanion)
    
    val PigInfoRequestSerializer = new ScalapbProtobufSerializer(com.example.helloworld.PigInfoRequest.messageCompanion)
    
    val HumanRequestSerializer = new ScalapbProtobufSerializer(com.example.helloworld.HumanRequest.messageCompanion)
    
    val WorkInfoHumanRequestSerializer = new ScalapbProtobufSerializer(com.example.helloworld.WorkInfoHumanRequest.messageCompanion)
    
    val CitizenSerializer = new ScalapbProtobufSerializer(com.example.helloworld.Citizen.messageCompanion)
    
    val HelloReplySerializer = new ScalapbProtobufSerializer(com.example.helloworld.HelloReply.messageCompanion)
    
    val PigInfoReplySerializer = new ScalapbProtobufSerializer(com.example.helloworld.PigInfoReply.messageCompanion)
    
    val HumanReplySerializer = new ScalapbProtobufSerializer(com.example.helloworld.HumanReply.messageCompanion)
    
    val WorkInfoHumanReplySerializer = new ScalapbProtobufSerializer(com.example.helloworld.WorkInfoHumanReply.messageCompanion)
    
    val HouseSerializer = new ScalapbProtobufSerializer(com.example.helloworld.House.messageCompanion)
    
  }

  @ApiMayChange
  object MethodDescriptors {
    import akka.grpc.internal.Marshaller
    import io.grpc.MethodDescriptor
    import Serializers._

    
    val sayHelloDescriptor: MethodDescriptor[com.example.helloworld.HelloRequest, com.example.helloworld.HelloReply] =
      MethodDescriptor.newBuilder()
        .setType(
   MethodDescriptor.MethodType.UNARY 
  
  
  
)
        .setFullMethodName(MethodDescriptor.generateFullMethodName("GreeterService", "SayHello"))
        .setRequestMarshaller(new Marshaller(HelloRequestSerializer))
        .setResponseMarshaller(new Marshaller(HelloReplySerializer))
        .setSampledToLocalTracing(true)
        .build()
    
    val sayPigInfoDescriptor: MethodDescriptor[com.example.helloworld.PigInfoRequest, com.example.helloworld.PigInfoReply] =
      MethodDescriptor.newBuilder()
        .setType(
   MethodDescriptor.MethodType.UNARY 
  
  
  
)
        .setFullMethodName(MethodDescriptor.generateFullMethodName("GreeterService", "SayPigInfo"))
        .setRequestMarshaller(new Marshaller(PigInfoRequestSerializer))
        .setResponseMarshaller(new Marshaller(PigInfoReplySerializer))
        .setSampledToLocalTracing(true)
        .build()
    
    val sayHumanInfoDescriptor: MethodDescriptor[com.example.helloworld.HumanRequest, com.example.helloworld.HumanReply] =
      MethodDescriptor.newBuilder()
        .setType(
   MethodDescriptor.MethodType.UNARY 
  
  
  
)
        .setFullMethodName(MethodDescriptor.generateFullMethodName("GreeterService", "SayHumanInfo"))
        .setRequestMarshaller(new Marshaller(HumanRequestSerializer))
        .setResponseMarshaller(new Marshaller(HumanReplySerializer))
        .setSampledToLocalTracing(true)
        .build()
    
    val sayWorkInfoHumanDescriptor: MethodDescriptor[com.example.helloworld.WorkInfoHumanRequest, com.example.helloworld.WorkInfoHumanReply] =
      MethodDescriptor.newBuilder()
        .setType(
   MethodDescriptor.MethodType.UNARY 
  
  
  
)
        .setFullMethodName(MethodDescriptor.generateFullMethodName("GreeterService", "SayWorkInfoHuman"))
        .setRequestMarshaller(new Marshaller(WorkInfoHumanRequestSerializer))
        .setResponseMarshaller(new Marshaller(WorkInfoHumanReplySerializer))
        .setSampledToLocalTracing(true)
        .build()
    
    val houseAndCitizenDescriptor: MethodDescriptor[com.example.helloworld.Citizen, com.example.helloworld.House] =
      MethodDescriptor.newBuilder()
        .setType(
   MethodDescriptor.MethodType.UNARY 
  
  
  
)
        .setFullMethodName(MethodDescriptor.generateFullMethodName("GreeterService", "HouseAndCitizen"))
        .setRequestMarshaller(new Marshaller(CitizenSerializer))
        .setResponseMarshaller(new Marshaller(HouseSerializer))
        .setSampledToLocalTracing(true)
        .build()
    
  }
}
